# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

VERSION='0.1'
APPNAME='NDNLP'

from waflib import Build, Utils, Logs

def options(opt):
    opt.add_option('--debug',action='store_true',default=False,dest='debug',help='''debugging mode''')
    opt.add_option('--test', action='store_true',default=False,dest='_test',help='''build unit tests''')
    opt.add_option('--yes',action='store_true',default=False,help='''for autoconf/automake/make compatibility''')

    opt.load('compiler_cc ccnx')

def configure(conf):
    conf.load("compiler_cc ccnx")

    if not conf.check_cfg(package='openssl', args=['--cflags', '--libs'], uselib_store='SSL', mandatory=False):
        libcrypto = conf.check_cc(lib='crypto',
                                  header_name='openssl/crypto.h',
                                  define_name='HAVE_SSL',
                                  uselib_store='SSL')
    else:
        conf.define ("HAVE_SSL", 1)
    if not conf.get_define ("HAVE_SSL"):
        conf.fatal ("Cannot find SSL libraries")

    conf.check_ccnx (path=conf.options.ccnx_dir)

    # conf.env.append_value('CFLAGS', ['-Wpointer-arith', '-Wreturn-type', '-Wstrict-prototypes'])
    conf.env.append_value('CFLAGS', ['-std=gnu99'])
    conf.define ('_BSD_SOURCE', 1)

    if conf.options.debug:
        conf.define ('_DEBUG', 1)
        conf.env.append_value('CFLAGS', ['-O0', '-Wall', '-Wno-unused-variable', '-g3'])
    else:
        conf.env.append_value('CFLAGS', ['-O3', '-g'])

    if conf.options._test:
        conf.check_cfg(package='cunit', args=['--cflags', '--libs'], uselib_store='CUNIT', mandatory=True)
        conf.check_cfg(package='ncurses', args=['--cflags', '--libs'], uselib_store='CUNIT', mandatory=True)

        conf.define ('_TESTS', 1)
        conf.env.TEST = 1

    # conf.write_config_header('src/config.h') # if you want to use autogenerated config.h file

def build (bld):
    bld (target = "NDNLP_COMMON",
        features = "c",
        source = bld.path.ant_glob(['src/*.c']),
        use = "CCNX",
        includes = "src")

    PROGRAMS = 'ndnlink ndnld ndnldc'
    for program in Utils.to_list (PROGRAMS):
        bld (target = program,
             features = "c cprogram",
             source = "tools/%s.c" % program,
             use = "NDNLP_COMMON CCNX SSL",
             includes = "src"
             # SUID should not be used. It is user's responsibility to start app with root privileges!
            )

    if bld.env['TEST']:
        bld (target = "unittest",
             features = "c cprogram",
             source = bld.path.ant_glob(['test/*.c']),
             use = "NDNLP_COMMON CCNX SSL CUNIT NCURSES",
             includes = "src",
             install_path = None) # this prevents installation

def rununittest (bld):
    Logs.info ("Running unittests")

    import subprocess
    from subprocess import call
    subprocess.call ("./build/unittest")
